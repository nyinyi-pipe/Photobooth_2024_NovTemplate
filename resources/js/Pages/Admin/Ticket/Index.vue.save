<template>
  <Head title="Manage All Tickets" />
  <AdminLayout>
    <div class="py-2 py-md-0">
      <h1 class="mb-3">Manage All Tickets</h1>
      <div class="row justify-content-center">
        <div class="col-12 col-md-12">
          <div class="p-3 border rounded shadow-md">
            <div class="d-flex justify-content-end">
              <van-button color="#7232dd" data-bs-toggle="modal" class="mb-3" data-bs-target="#addTicketModal">Generate
                Ticket</van-button>

              <div class="modal fade" id="addTicketModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h1 class="modal-title fs-5">New Ticket</h1>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      <form id="addtricketform">
                        <div class="mb-3">
                          <label for="date" class="form-label">Ticket Date</label>
                          <input type="date" class="form-control" v-model="ticketDate" id="date">
                          <InputError class="mt-2" :message="errors.ticket_by_date" />
                        </div>
                        <div class="mb-3">
                          <label for="duration" class="form-label">Ticket Duration </label>
                          <input type="number" class="form-control" v-model="ticketDuration" id="duration">
                          <InputError class="mt-2" :message="errors.ticket_duration" />
                        </div>
                        <div class="mb-3">
                          <label for="mount" class="form-label">Ticket Amount </label>
                          <input type="number" class="form-control" v-model="ticketMount" id="mount">
                          <InputError class="mt-2" :message="errors.ticket_mount" />
                        </div>
                        <div class="mb-3">
                          <label for="number" class="form-label">Number of Tickets </label>
                          <input type="number" class="form-control" v-model="ticketType" id="number">
                          <InputError class="mt-2" :message="errors.ticket_type" />
                        </div>

                      </form>
                    </div>
                    <div class="modal-footer">
                      <button type="button" form="addtricketform" class="btn btn-outline-secondary"
                        data-bs-dismiss="modal">Close</button>
                      <button type="submit" form="addtricketform" class="btn btn-outline-primary"
                        @click="addTicket">Add</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="table-responsive">
              <table class="table">
                <thead>
                  <tr>
                    <th>No</th>
                    <th>Code</th>
                    <th>Amount</th>
                    <th>Generate Date</th>
                    <th>Available Days</th>
                    <th>Status</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody v-for="ticket in mainTickets.data"
                  :style="{ 'background-color': ticket.ticket_used ? '#efefef' : '' }">
                  <tr>
                    <th>{{ ticket.id }}</th>
                    <th>{{ ticket.ticket_code }}</th>
                    <th>{{ priceFormat(ticket.ticket_mount) }}</th>
                    <th>{{ ticket.ticket_by_date }}</th>
                    <th>{{ ticket.ticket_duration }}</th>
                    <th>{{ ticket.ticket_used ? "Used" : "Valid" }}</th>
                    <th class="d-flex gap-2">
                      <button class="btn btn-sm btn-outline-success" @click="ticketEdit(ticket.id)">Edit</button>
                      <button class="btn btn-sm btn-outline-danger" @click="ticketDelete(ticket.id)">Delete</button>
                    </th>
                  </tr>
                </tbody>
              </table>
              <Bootstrap5Pagination align="right" :data="mainTickets" @pagination-change-page="getItems">
              </Bootstrap5Pagination>

            </div>
          </div>
        </div>



        <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h1 class="modal-title fs-5" id="editModalLabel">Ticket - {{ editTicketForm.editTicketTitle }}</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <form id="editTicket">
                  <div class="mb-3">
                    <label for="date" class="form-label">Ticket Date</label>
                    <input type="date" class="form-control" v-model="editTicketForm.ticketDateEdit" id="date">
                  </div>
                  <div class="mb-3">
                    <label for="duration" class="form-label">Ticket Duration </label>
                    <input type="number" class="form-control" v-model="editTicketForm.ticketDurationEdit" id="duration">
                  </div>
                  <div class="mb-3">
                    <label for="mount" class="form-label">Ticket Mount </label>
                    <input type="number" class="form-control" v-model="editTicketForm.ticketMount" id="mount">
                  </div>
                </form>
              </div>
              <div class="modal-footer">
                <button type="button" form="editTicket" class="btn btn-outline-secondary btn-sm"
                  data-bs-dismiss="modal">Close</button>
                <button type="button" form="editTicket" class="btn btn-outline-primary btn-sm"
                  @click="updatedTicket">Update</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AdminLayout>
</template>
<script setup>
import { Bootstrap5Pagination } from 'laravel-vue-pagination';

import bootstrapBundle from "bootstrap/dist/js/bootstrap.bundle";
import priceFormat from '@/composables/priceFormat';
import { reactive, ref, onMounted, watchEffect } from "vue";
import { Link, Head, router } from '@inertiajs/vue3';
import Swal from 'sweetalert2';
import InputError from '@/Components/InputError.vue';
import AdminLayout from '@/Components/admin/Layout/AdminLayout.vue';
import axios from 'axios';

let mainTickets = ref({});
defineProps({
  tickets: Object,
})

const options = ref([
  { text: 'Ticket', value: 'Ticket' },
  { text: 'Cash', value: 'Cash' },
])

let isActive = ref(true);
let ticketDate = ref("");
let ticketMount = ref(null);
let ticketType = ref(null);
let ticketDuration = ref(null);
let errors = ref({})
const modal = ref(null);

const editTicketForm = reactive({
  ticketDateEdit: null,
  ticketDurationEdit: null,
  editTicketTitle: null,
  editTicketId: null,
  ticketMount: null,
  ticketType: null
})

onMounted(() => {
  modal.value = new bootstrapBundle.Modal("#editModal");
  getItems();
});

const getItems = async (page = 1) => {
  await axios.get(`/api/tickets?page=${page}`).then(({ data }) => {
    mainTickets.value = data
  }).catch(({ response }) => {
    console.error(response)
  })
}


const ticketStatus = (id) => {
  const tickets = document.querySelectorAll("#ticketStatusRow");

  let data = {
    status: null,
  }
  tickets.forEach((ticket) => {
    if (ticket.getAttribute("data-id") == id) {
      if (ticket.checked) {
        data.status = 1;
      } else {
        data.status = 0;
      }
    }
  })
  router.patch(`/admin/ticket/status/${id}`, data, {
    onSuccess: () => {
      const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.addEventListener('mouseenter', Swal.stopTimer)
          toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
      })

      Toast.fire({
        icon: 'success',
        title: `Ticket status updated.`
      })
    },
    onError: () => {
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Something went wrong!',
        footer: '<a href="">Why do I have this issue?</a>'
      })
    }
  })
}


const addTicket = (e) => {
  e.preventDefault();

  const datas = {
    ticket_by_date: ticketDate.value,
    ticket_mount: ticketMount.value,
    ticket_duration: ticketDuration.value,
    number_of_tickets: ticketType.value,
  }
  router.post('/admin/ticket', datas, {
    onSuccess: () => {
      getItems();
      ticketDate.value = "";
      ticketDuration.value = "";
      ticketMount.value = "";
      ticketType.value = "";
      isActive.value = true;
      const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.addEventListener('mouseenter', Swal.stopTimer)
          toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
      })

      Toast.fire({
        icon: 'success',
        title: 'Added new a ticket successfully.'
      })
    },
    onError: (err) => {
      errors.value = err;
    }
  })
}

const ticketEdit = async (id) => {
  const data = await fetch('/admin/ticket/' + id);
  const { ticket } = await data.json();
  editTicketForm.ticketDateEdit = ticket.ticket_by_date
  editTicketForm.ticketDurationEdit = ticket.ticket_duration
  editTicketForm.editTicketTitle = ticket.ticket_code;
  editTicketForm.editTicketId = ticket.id;
  editTicketForm.ticketMount = ticket.ticket_mount;
  editTicketForm.ticketType = ticket.number_of_tickets;

  modal.value.show();
}

const updatedTicket = () => {
  router.patch(`/admin/ticket/${editTicketForm.editTicketId}`, editTicketForm, {
    onSuccess: () => {
      getItems();
      const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.addEventListener('mouseenter', Swal.stopTimer)
          toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
      })

      Toast.fire({
        icon: 'success',
        title: `${editTicketForm.editTicketTitle} has been updated.`
      })
      modal.value.hide();
    },
    onError: () => {
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Something went wrong!',
        footer: '<a href="">Why do I have this issue?</a>'
      })
    }
  })
}

const ticketDelete = (id) => {
  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
  }).then((result) => {
    if (result.isConfirmed) {
      router.delete('/admin/ticket/' + id, {
        onSuccess: () => {
          Swal.fire(
            'Deleted!',
            'Your ticket has been deleted.',
            'success'
          )
        },
        onError: () => {
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong!',
          })
        }
      })


    }
  })
}

</script>

